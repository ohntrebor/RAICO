Write-Host "Iniciando a configura√ß√£o do projeto RAICO..."

# 1. Verificar se o Python 3.8+ est√° instalado
Write-Host "üîç Verificando a vers√£o do Python instalada..."
$python = Get-Command python -ErrorAction SilentlyContinue

if ($python) {
    # Obt√©m a vers√£o do Python como string
    $pythonVersion = &python --version 2>&1

    # Verifica se a sa√≠da cont√©m a palavra "Python" e extrai os n√∫meros da vers√£o
    if ($pythonVersion -like "Python*") {
        $versionString = $pythonVersion -replace "Python ", "" # Remove o prefixo "Python "
        $versionParts = $versionString.Split(".") # Divide a vers√£o em partes

        $major = [int]$versionParts[0]
        $minor = [int]$versionParts[1]

        # Verifica se a vers√£o √© menor que 3.8
        if ($major -lt 3 -or ($major -eq 3 -and $minor -lt 8)) {
            Write-Host "‚ùå Python $pythonVersion encontrado. √â necess√°rio Python 3.8 ou superior para continuar."
            Write-Host "Por favor, atualize o Python: https://www.python.org/downloads/"
            exit 1
        } else {
            Write-Host "‚úÖ Python $pythonVersion encontrado. A vers√£o √© compat√≠vel com o projeto RAICO."
        }
    } else {
        Write-Host "‚ùå N√£o foi poss√≠vel determinar a vers√£o do Python instalada. Certifique-se de que o Python est√° configurado corretamente."
        exit 1
    }
} else {
    Write-Host "‚ùå Python n√£o encontrado no sistema."
    Write-Host "Por favor, instale o Python 3.8 ou superior para continuar: https://www.python.org/downloads/"
    exit 1
}

# 2. Criar ambiente virtual
Write-Host "üî® Criando ambiente virtual..."
if (Test-Path -Path "venv") {
    Write-Host "‚ö†Ô∏è Ambiente virtual j√° existe. Pulando a cria√ß√£o."
} else {
    &python -m venv venv
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Falha ao criar o ambiente virtual."
        exit 1
    }
}

# 3. Ativar ambiente virtual
Write-Host "üîß Ativando o ambiente virtual..."
$activatePath = Join-Path -Path "venv" -ChildPath "Scripts/Activate.ps1"
if (Test-Path -Path $activatePath) {
    & $activatePath
} else {
    Write-Host "‚ùå N√£o foi poss√≠vel ativar o ambiente virtual."
    Write-Host "Ative manualmente: venv\Scripts\Activate.ps1"
    exit 1
}

# 4. Atualizar pip
Write-Host "‚¨ÜÔ∏è Atualizando o pip..."
pip install --upgrade pip
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Falha ao atualizar o pip."
    exit 1
}

# 5. Instalar depend√™ncias
Write-Host "üì¶ Instalando depend√™ncias do projeto..."
pip install -r scripts/requirements.txt
pip install pytest
pip install python-dotenv
pip install --upgrade PyGithub
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Falha ao instalar depend√™ncias."
    exit 1
}

# 6. Configurar o arquivo .env
Write-Host "üìÑ Verificando arquivo .env..."
if (-not (Test-Path ".env")) {
    @"
AI_PROVIDER="gemini"
AI_API_KEY="sua_chave_api_gemini"
AI_MODEL="gemini-1.5-flash-latest"
AI_VERSION="v1beta"
GITHUB_REPOSITORY="github.com/seu-usuario/seu-repo"
GITHUB_TOKEN="seu_token_github"
PR_NUMBER="7"
PROMPT_PATH="scripts/prompts/default_prompt.txt"
"@ > .env
    Write-Host "‚úÖ Arquivo .env criado."
} else {
    Write-Host "‚ö†Ô∏è Arquivo .env j√° existe. Pulando a cria√ß√£o."
}

# 7. Verificar arquivo de prompt
Write-Host "üìÑ Verificando arquivo de prompt..."
if (-not (Test-Path "scripts/prompts/default_prompt.txt")) {
    New-Item -ItemType Directory -Path "scripts/prompts" -Force | Out-Null
    "Este √© um prompt gen√©rico para revis√£o de Pull Requests." > "scripts/prompts/default_prompt.txt"
    Write-Host "‚úÖ Arquivo de prompt criado."
} else {
    Write-Host "‚ö†Ô∏è Arquivo de prompt j√° existe."
}

Write-Host "‚úÖ Configura√ß√£o conclu√≠da com sucesso! O projeto RAICO est√° pronto para uso local. N√£o se esque√ßa de atualizar o .env, se necess√°rio."
